import { GoogleGenAI, Modality, Part } from "@google/genai";
import type { Base64File } from '../utils/fileUtils';

const API_KEY = process.env.API_KEY;
if (!API_KEY) {
    throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

export const restoreMemory = async (
  primaryImage: Base64File,
  secondaryImage: Base64File | null,
  prompt: string
): Promise<string> => {
  const model = 'gemini-2.5-flash-image-preview';

  const parts: Part[] = [
    { inlineData: { data: primaryImage.data, mimeType: primaryImage.mimeType } },
  ];

  let fullPrompt = prompt;

  if (secondaryImage) {
    parts.push({ inlineData: { data: secondaryImage.data, mimeType: secondaryImage.mimeType } });
    fullPrompt += "\n\nCRITICAL INSTRUCTION: Use the person from the second image provided and seamlessly add them to the main scene depicted in the first image. Ensure the lighting, style, and quality match perfectly.";
  }
  
  parts.push({ text: fullPrompt });

  const result = await ai.models.generateContent({
    model,
    contents: { parts },
    config: {
      responseModalities: [Modality.IMAGE, Modality.TEXT],
    },
  });
  
  const candidates = result.candidates;
  if (!candidates || candidates.length === 0 || !candidates[0].content || !candidates[0].content.parts) {
      throw new Error("Invalid response from AI model. No content found.");
  }

  for (const part of candidates[0].content.parts) {
    if (part.inlineData && part.inlineData.data) {
      const restoredImageBase64 = part.inlineData.data;
      const mimeType = part.inlineData.mimeType;
      return `data:${mimeType};base64,${restoredImageBase64}`;
    }
  }

  // Fallback to check for text-only response for debugging
  const textResponse = result.text;
  if(textResponse) {
      throw new Error(`AI returned a text response instead of an image: "${textResponse}"`);
  }

  throw new Error("No image was generated by the AI. The model may have returned an unexpected response.");
};
